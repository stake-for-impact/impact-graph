// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class HarvestRewards extends ethereum.Event {
  get params(): HarvestRewards__Params {
    return new HarvestRewards__Params(this);
  }
}

export class HarvestRewards__Params {
  _event: HarvestRewards;

  constructor(event: HarvestRewards) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StakeToLido extends ethereum.Event {
  get params(): StakeToLido__Params {
    return new StakeToLido__Params(this);
  }
}

export class StakeToLido__Params {
  _event: StakeToLido;

  constructor(event: StakeToLido) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  beneficiaryAddress(): Address {
    let result = super.call(
      "beneficiaryAddress",
      "beneficiaryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_beneficiaryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "beneficiaryAddress",
      "beneficiaryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  imNFT(): Address {
    let result = super.call("imNFT", "imNFT():(address)", []);

    return result[0].toAddress();
  }

  try_imNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("imNFT", "imNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stETH(): Address {
    let result = super.call("stETH", "stETH():(address)", []);

    return result[0].toAddress();
  }

  try_stETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("stETH", "stETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalDepositedEth(): BigInt {
    let result = super.call(
      "totalDepositedEth",
      "totalDepositedEth():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositedEth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedEth",
      "totalDepositedEth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _stETHaddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _imNFTaddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class HarvestRewardsCall extends ethereum.Call {
  get inputs(): HarvestRewardsCall__Inputs {
    return new HarvestRewardsCall__Inputs(this);
  }

  get outputs(): HarvestRewardsCall__Outputs {
    return new HarvestRewardsCall__Outputs(this);
  }
}

export class HarvestRewardsCall__Inputs {
  _call: HarvestRewardsCall;

  constructor(call: HarvestRewardsCall) {
    this._call = call;
  }
}

export class HarvestRewardsCall__Outputs {
  _call: HarvestRewardsCall;

  constructor(call: HarvestRewardsCall) {
    this._call = call;
  }
}

export class StakeToLidoCall extends ethereum.Call {
  get inputs(): StakeToLidoCall__Inputs {
    return new StakeToLidoCall__Inputs(this);
  }

  get outputs(): StakeToLidoCall__Outputs {
    return new StakeToLidoCall__Outputs(this);
  }
}

export class StakeToLidoCall__Inputs {
  _call: StakeToLidoCall;

  constructor(call: StakeToLidoCall) {
    this._call = call;
  }
}

export class StakeToLidoCall__Outputs {
  _call: StakeToLidoCall;

  constructor(call: StakeToLidoCall) {
    this._call = call;
  }
}

export class TransferResiduesCall extends ethereum.Call {
  get inputs(): TransferResiduesCall__Inputs {
    return new TransferResiduesCall__Inputs(this);
  }

  get outputs(): TransferResiduesCall__Outputs {
    return new TransferResiduesCall__Outputs(this);
  }
}

export class TransferResiduesCall__Inputs {
  _call: TransferResiduesCall;

  constructor(call: TransferResiduesCall) {
    this._call = call;
  }
}

export class TransferResiduesCall__Outputs {
  _call: TransferResiduesCall;

  constructor(call: TransferResiduesCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
